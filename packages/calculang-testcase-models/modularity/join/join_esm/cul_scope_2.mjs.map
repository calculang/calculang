{"version":3,"names":["memoize","table_","table$","order_","order$","order_row_","order_row$","customer_","customer$","item_","item$","table$m","JSON","stringify","table","a","order$m","order","order_in","order_row$m","order_row","customer$m","customer","item$m","item"],"sources":["orders.cul.js"],"sourcesContent":["\n    import { memoize } from 'underscore';\n    //import memoize from 'lru-memoize';\n    //import { isEqual } from 'underscore'; // TODO poor tree shaking support, or why is this impact so massive? Move to lodash/lodash-es?\n    \n    import { table_ as table$, order_ as order$, order_row_ as order_row$, customer_ as customer$, item_ as item$ } from './orders.cul.js?&+memoed'; // there is already-culed stuff in here, why? imports to memo loader include cul_scope_id, what logic should it apply RE passing forward? eliminate? Probably!\n    \n    \n\n////////// start table memo-loader code //////////\n//const table$m = memoize(999999, isEqual)(table$);\nexport const table$m = memoize(table$, JSON.stringify);\nexport const table = (a) => {\n  return table$m(a);\n  // eslint-disable-next-line no-undef\n  table$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end table memo-loader code //////////\n\n\n\n////////// start order memo-loader code //////////\n//const order$m = memoize(999999, isEqual)(order$);\nexport const order$m = memoize(order$, JSON.stringify);\nexport const order = (a) => {\n  return order$m(a);\n  // eslint-disable-next-line no-undef\n  order$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end order memo-loader code //////////\n\n\n\n////////// start order_row memo-loader code //////////\n//const order_row$m = memoize(999999, isEqual)(order_row$);\nexport const order_row$m = memoize(order_row$, JSON.stringify);\nexport const order_row = (a) => {\n  return order_row$m(a);\n  // eslint-disable-next-line no-undef\n  order_row$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end order_row memo-loader code //////////\n\n\n\n////////// start customer memo-loader code //////////\n//const customer$m = memoize(999999, isEqual)(customer$);\nexport const customer$m = memoize(customer$, JSON.stringify);\nexport const customer = (a) => {\n  return customer$m(a);\n  // eslint-disable-next-line no-undef\n  customer$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end customer memo-loader code //////////\n\n\n\n////////// start item memo-loader code //////////\n//const item$m = memoize(999999, isEqual)(item$);\nexport const item$m = memoize(item$, JSON.stringify);\nexport const item = (a) => {\n  return item$m(a);\n  // eslint-disable-next-line no-undef\n  item$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end item memo-loader code //////////\n\n\n    "],"mappings":";AACI,SAASA,OAAO,QAAQ,YAAY;AACpC;AACA;;AAEA,SAASC,MAAM,IAAIC,MAAM,EAAEC,MAAM,IAAIC,MAAM,EAAEC,UAAU,IAAIC,UAAU,EAAEC,SAAS,IAAIC,SAAS,EAAEC,KAAK,IAAIC,KAAK,QAAQ,+DAA0B,CAAC,CAAC;;;;AAIrJ;AACA;AACA,OAAO,MAAMC,OAAO,GAAGX,OAAO,CAACE,MAAM,EAAEU,IAAI,CAACC,SAAS,CAAC;AACtD,OAAO,MAAMC,KAAK,GAAGA,CAACC,CAAC,KAAK;EAC1B,OAAOJ,OAAO,CAACI,CAAC,CAAC;EACjB;EACAb,MAAM,IAAE,CAAC,CAAC;AACZ,CAAC;AACD;;;;AAIA;AACA;AACA,OAAO,MAAMc,OAAO,GAAGhB,OAAO,CAACI,MAAM,EAAEQ,IAAI,CAACC,SAAS,CAAC;AACtD,OAAO,MAAMI,MAAK,GAAGA,CAACF,CAAC,KAAK;EAC1B,OAAOC,OAAO,CAACD,CAAC,CAAC;EACjB;EACAX,MAAM,GAAAc,QAAA,GAAE,CAAC,CAAC;AACZ,CAAC;AACD;;;;AAIA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGnB,OAAO,CAACM,UAAU,EAAEM,IAAI,CAACC,SAAS,CAAC;AAC9D,OAAO,MAAMO,SAAS,GAAGA,CAACL,CAAC,KAAK;EAC9B,OAAOI,WAAW,CAACJ,CAAC,CAAC;EACrB;EACAT,UAAU,GAAAY,QAAA,GAAE,CAAC,CAAC;AAChB,CAAC;AACD;;;;AAIA;AACA;AACA,OAAO,MAAMG,UAAU,GAAGrB,OAAO,CAACQ,SAAS,EAAEI,IAAI,CAACC,SAAS,CAAC;AAC5D,OAAO,MAAMS,SAAQ,GAAGA,CAACP,CAAC,KAAK;EAC7B,OAAOM,UAAU,CAACN,CAAC,CAAC;EACpB;EACAP,SAAS,GAAAU,QAAA,GAAE,CAAC,CAAC;AACf,CAAC;AACD;;;;AAIA;AACA;AACA,OAAO,MAAMK,MAAM,GAAGvB,OAAO,CAACU,KAAK,EAAEE,IAAI,CAACC,SAAS,CAAC;AACpD,OAAO,MAAMW,KAAI,GAAGA,CAACT,CAAC,KAAK;EACzB,OAAOQ,MAAM,CAACR,CAAC,CAAC;EAChB;EACAL,KAAK,GAAAQ,QAAA,GAAE,CAAC,CAAC;AACX,CAAC;AACD"}