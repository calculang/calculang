{"version":3,"names":["memoize","revenue_","revenue$","price_","price$","units_","units$","costs_","costs$","profit_","profit$","revenue$m","JSON","stringify","revenue","a","price_in","price$m","price","units$m","units","units_in","costs$m","costs","profit$m","profit"],"sources":["base.cul.js"],"sourcesContent":["\n    import { memoize } from 'underscore';\n    //import memoize from 'lru-memoize';\n    //import { isEqual } from 'underscore'; // TODO poor tree shaking support, or why is this impact so massive? Move to lodash/lodash-es?\n    \n    import { revenue_ as revenue$, price_ as price$, units_ as units$, costs_ as costs$, profit_ as profit$ } from './base.cul.js?&+memoed'; // there is already-culed stuff in here, why? imports to memo loader include cul_scope_id, what logic should it apply RE passing forward? eliminate? Probably!\n    \n    \n\n////////// start revenue memo-loader code //////////\n//const revenue$m = memoize(999999, isEqual)(revenue$);\nexport const revenue$m = memoize(revenue$, JSON.stringify);\nexport const revenue = (a) => {\n  return revenue$m(a);\n  // eslint-disable-next-line no-undef\n  revenue$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end revenue memo-loader code //////////\n\n\n\n////////// start price memo-loader code //////////\n//const price$m = memoize(999999, isEqual)(price$);\nexport const price$m = memoize(price$, JSON.stringify);\nexport const price = (a) => {\n  return price$m(a);\n  // eslint-disable-next-line no-undef\n  price$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end price memo-loader code //////////\n\n\n\n////////// start units memo-loader code //////////\n//const units$m = memoize(999999, isEqual)(units$);\nexport const units$m = memoize(units$, JSON.stringify);\nexport const units = (a) => {\n  return units$m(a);\n  // eslint-disable-next-line no-undef\n  units$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end units memo-loader code //////////\n\n\n\n////////// start costs memo-loader code //////////\n//const costs$m = memoize(999999, isEqual)(costs$);\nexport const costs$m = memoize(costs$, JSON.stringify);\nexport const costs = (a) => {\n  return costs$m(a);\n  // eslint-disable-next-line no-undef\n  costs$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end costs memo-loader code //////////\n\n\n\n////////// start profit memo-loader code //////////\n//const profit$m = memoize(999999, isEqual)(profit$);\nexport const profit$m = memoize(profit$, JSON.stringify);\nexport const profit = (a) => {\n  return profit$m(a);\n  // eslint-disable-next-line no-undef\n  profit$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end profit memo-loader code //////////\n\n\n    "],"mappings":";AACI,SAASA,OAAO,QAAQ,YAAY;AACpC;AACA;;AAEA,SAASC,QAAQ,IAAIC,QAAQ,EAAEC,MAAM,IAAIC,MAAM,EAAEC,MAAM,IAAIC,MAAM,EAAEC,MAAM,IAAIC,MAAM,EAAEC,OAAO,IAAIC,OAAO,QAAQ,6DAAwB,CAAC,CAAC;;;;AAI7I;AACA;AACA,OAAO,MAAMC,SAAS,GAAGX,OAAO,CAACE,QAAQ,EAAEU,IAAI,CAACC,SAAS,CAAC;AAC1D,OAAO,MAAMC,QAAO,GAAGA,CAACC,CAAC,KAAK;EAC5B,OAAOJ,SAAS,CAACI,CAAC,CAAC;EACnB;EACAb,QAAQ,GAAAc,QAAA,GAAE,CAAC,CAAC;AACd,CAAC;AACD;;;;AAIA;AACA;AACA,OAAO,MAAMC,OAAO,GAAGjB,OAAO,CAACI,MAAM,EAAEQ,IAAI,CAACC,SAAS,CAAC;AACtD,OAAO,MAAMK,MAAK,GAAGA,CAACH,CAAC,KAAK;EAC1B,OAAOE,OAAO,CAACF,CAAC,CAAC;EACjB;EACAX,MAAM,GAAAY,QAAA,GAAE,CAAC,CAAC;AACZ,CAAC;AACD;;;;AAIA;AACA;AACA,OAAO,MAAMG,OAAO,GAAGnB,OAAO,CAACM,MAAM,EAAEM,IAAI,CAACC,SAAS,CAAC;AACtD,OAAO,MAAMO,MAAK,GAAGA,CAACL,CAAC,KAAK;EAC1B,OAAOI,OAAO,CAACJ,CAAC,CAAC;EACjB;EACAT,MAAM,GAAAe,QAAA,GAAE,CAAC,CAAC;AACZ,CAAC;AACD;;;;AAIA;AACA;AACA,OAAO,MAAMC,OAAO,GAAGtB,OAAO,CAACQ,MAAM,EAAEI,IAAI,CAACC,SAAS,CAAC;AACtD,OAAO,MAAMU,KAAK,GAAGA,CAACR,CAAC,KAAK;EAC1B,OAAOO,OAAO,CAACP,CAAC,CAAC;EACjB;EACAP,MAAM,GAAAQ,QAAA,GAAE,CAAC,CAAC;AACZ,CAAC;AACD;;;;AAIA;AACA;AACA,OAAO,MAAMQ,QAAQ,GAAGxB,OAAO,CAACU,OAAO,EAAEE,IAAI,CAACC,SAAS,CAAC;AACxD,OAAO,MAAMY,MAAM,GAAGA,CAACV,CAAC,KAAK;EAC3B,OAAOS,QAAQ,CAACT,CAAC,CAAC;EAClB;EACAL,OAAO,GAAAM,QAAA,GAAE,CAAC,CAAC;AACb,CAAC;AACD"}